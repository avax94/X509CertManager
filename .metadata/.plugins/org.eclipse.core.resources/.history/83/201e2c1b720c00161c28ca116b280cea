package sm130075.vl130298.crypto;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.nio.ByteBuffer;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PKCS12Attribute;
import java.security.Principal;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.cert.CertStore;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import sun.security.pkcs.PKCS9Attribute;
import sun.security.pkcs10.*;
import sun.security.util.DerValue;
import sun.security.x509.*;
import javax.security.cert.CertificateEncodingException;
import javax.security.cert.CertificateException;
import javax.security.cert.CertificateExpiredException;
import javax.security.cert.CertificateNotYetValidException;
import javax.security.cert.X509Certificate;
import sun.security.pkcs10.*;

public class CSR {
	private PKCS10 csr;
	private boolean toEncrypt = false;
	byte[] encoded;
	AES aesCrypter = null;
	
	public CSR(PublicKey publicKey, PrivateKey privateKey, X500Name x500Name) {
		try {
			csr = new PKCS10(publicKey);
			Signature sig = Signature.getInstance(publicKey.getAlgorithm());
			sig.initSign(privateKey);
			csr.encodeAndSign(x500Name, sig);
			encoded = csr.getEncoded();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public CSR(PublicKey publicKey, PrivateKey privateKey, X500Name x500Name, boolean toEncrypt) {
		try {
			csr = new PKCS10(publicKey);
			Signature sig = Signature.getInstance(publicKey.getAlgorithm());
			sig.initSign(privateKey);
			csr.encodeAndSign(x500Name, sig);
			encoded = csr.getEncoded();
			this.toEncrypt = toEncrypt;
			
			if(toEncrypt){
				aesCrypter = new AES();
				aesCrypter.encrypt(encoded);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public byte[] getEncoded(){
		return encoded.clone();
	}
	
	public static void main(String[] argv){
		KeyPair keypair = KeyGen.generatePair(Algorithm.RSA, 2048);
		CSR csr = null;
		try {
			csr = new CSR(keypair.getPublic(), keypair.getPrivate(),new X500Name("AB","NC","CD","DE"));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println(new String(csr.getEncoded()));
		
	}
}
