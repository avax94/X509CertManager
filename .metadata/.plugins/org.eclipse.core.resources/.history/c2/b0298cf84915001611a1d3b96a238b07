package sm130075.vl130298.crypto;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.math.BigInteger;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.Key;
import java.security.KeyPair;
import java.security.KeyStore;
import java.security.KeyStore.PasswordProtection;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.UnrecoverableEntryException;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
// PATH PASSWORD AND KEYSTORE --/> 
// SIZE OD KEY VERZIJA PERIOD VAZENJA(DATE TIP) SERIJSKI BROJ , INFO O KORISNIKU , KORISCENJE KLJUCA
// 

import javax.crypto.CipherInputStream;
import javax.crypto.CipherOutputStream;

import sun.security.x509.X500Name;

import java.util.Date;

public class KeyStoreManager {

	private String path;
	private String password;
	private KeyStore keyStore;
	private AES aes;

	public KeyStoreManager(String path, String password)
			throws NoSuchAlgorithmException, CertificateException, IOException, KeyStoreException {
		this.path = path;
		this.password = password;

		// Create file if it doesnt exist
		keyStore = KeyStore.getInstance("pkcs12");
		Path p = Paths.get(path);
		aes = new AES();
		// check and then create
		if (!Files.exists(p)) {
			// this is creation
			keyStore.load(null, null);
			keyStore.store(new FileOutputStream(path), password.toCharArray());
		}

	}

	public Certificate getCertificate(String alias, String password)
			throws NoSuchAlgorithmException, CertificateException, IOException, KeyStoreException {

		KeyStore keyStore = KeyStore.getInstance("pkcs12");
		FileInputStream fStream = new FileInputStream(path);
		keyStore.load(fStream, this.password.toCharArray());
		Certificate cert = keyStore.getCertificateChain(alias)[0];
		fStream.close();

		return cert;

	}

	public KeyStorage getKeyStorage(String alias, String password) throws NoSuchAlgorithmException,
			CertificateException, IOException, KeyStoreException, UnrecoverableEntryException {
		// Instantiate storage
		KeyStore keyStore = KeyStore.getInstance("pkcs12");
		FileInputStream fStream = new FileInputStream(path);
		//keyStore.load(aes.decryptFile(fStream), this.password.toCharArray());

		// Set protection parameters
		PasswordProtection pwProt = new KeyStore.PasswordProtection(password.toCharArray());

		KeyStore.PrivateKeyEntry key = (KeyStore.PrivateKeyEntry) keyStore.getEntry(alias, pwProt);
		fStream.close();

		return new KeyStorage(key.getPrivateKey(), (UnsignedCert) key.getCertificate());

	}

	public void storeKey(String alias, KeyStorage keyStorage, String password)
			throws NoSuchAlgorithmException, CertificateException, IOException, KeyStoreException {
		PrivateKey key = keyStorage.getPrivateKey();
		Certificate cert = keyStorage.getUnsignedCert();

		keyStore.load(null, null);

		// Create certificate chain - only one UNSIGNED certificate
		Certificate[] array = new Certificate[1];
		array[0] = cert;

		keyStore.setKeyEntry(alias, key, password.toCharArray(), array);
		FileOutputStream writeStream = new FileOutputStream(path);
		writeStream.close();
		keyStore.store(writeStream, this.password.toCharArray());
		
		writeStream = new FileOutputStream(path);
	//	CipherOutputStream cOut = aes.encryptFile(writeStream);
		
	//	cOut.close();
		writeStream.close();
	}

	public static void main(String[] argv) {
		try {
			KeyPair kPair = KeyGen.generatePair(Algorithm.RSA, 1024);
			UnsignedCert uc = new UnsignedCert(BigInteger.ONE, new Date(System.currentTimeMillis()),
					new Date(2 * System.currentTimeMillis()), new X500Name("cn=test,o=gina"), kPair.getPublic(), null,
					null, null);

			KeyStorage ks = new KeyStorage(kPair.getPrivate(), uc);

			KeyStoreManager ksmngr = new KeyStoreManager("Novipath2", "");
			ksmngr.storeKey("avaxebre", ks, "avax");
			KeyStorage kstorage = ksmngr.getKeyStorage("avaxebre", "avax");

		} catch (NoSuchAlgorithmException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
