package sm130075.vl130298.crypto;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.*;
import java.security.KeyStore.PasswordProtection;
import java.security.KeyStore.ProtectionParameter;

import javax.crypto.SecretKey;

public class KeyStoreManager {
	String path;
	String password;

	public KeyStoreManager(String path, String password) {
		try {
			this.path = path;
			this.password = password;
			KeyStore keyStore = KeyStore.getInstance("pkcs12");
			Path p = Paths.get(path);
			
			if(!Files.exists(p)){
				keyStore.load(null, null);
		        keyStore.store(new FileOutputStream(path), password.toCharArray());
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void storeKey(Key key, String alias, String password) {
		try {
			KeyStore keyStore = KeyStore.getInstance("pkcs12");
			PasswordProtection keyPassword = new PasswordProtection(password.toCharArray());
			keyStore.load(null, this.password.toCharArray());
			KeyStore.SecretKeyEntry keyStoreEntry = new KeyStore.SecretKeyEntry((SecretKey) key);
			keyStore.setEntry(alias, keyStoreEntry, password.toCharArray(), null);
			OutputStream writeStream = new FileOutputStream(path);
			keyStore.store(writeStream, this.password.toCharArray());
			writeStream.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public Key getKey(String alias, String password) {
		try {
			KeyStore keyStore = KeyStore.getInstance("pkcs12");
			FileInputStream fStream = new FileInputStream(path);
			keyStore.load(fStream, this.password.toCharArray());
			
			if (!keyStore.containsAlias(alias)) { 
				 return null;
			} 
			
			PasswordProtection keyPassword = new PasswordProtection(password.toCharArray());
			KeyStore.Entry entry = keyStore.getEntry(alias, keyPassword);
			Key key = ((KeyStore.SecretKeyEntry) entry).getSecretKey();
			fStream.close();
			
			return key;
		} catch (Exception e) {
			e.printStackTrace();
		}

		return null;
	}
	
	public Key getKey(String alias) {
		try {
			KeyStore keyStore = KeyStore.getInstance("pkcs12");
			FileInputStream fStream = new FileInputStream(path);
			keyStore.load(fStream, this.password.toCharArray());
			Key key = keyStore.getKey(alias, null);
			fStream.close();
			
			return key;
		} catch (Exception e) {
			e.printStackTrace();
		}

		return null;
	}
	
	public void storeKey(Key key, String alias) {
		try {
			KeyStore keyStore = KeyStore.getInstance("pkcs12");
			FileInputStream fStream = new FileInputStream(path);
			keyStore.load(fStream, this.password.toCharArray());
			keyStore.setKeyEntry(alias, key.getEncoded(), null);
			OutputStream writeStream = new FileOutputStream(path);
			keyStore.store(writeStream, this.password.toCharArray());
			writeStream.close();
			fStream.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
