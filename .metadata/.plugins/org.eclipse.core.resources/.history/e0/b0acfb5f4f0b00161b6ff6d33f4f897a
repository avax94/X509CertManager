package sm130075.vl130298.crypto;

import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.nio.ByteBuffer;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PKCS12Attribute;
import java.security.Principal;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.cert.CertStore;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import sun.security.pkcs10.*;
import javax.security.cert.CertificateEncodingException;
import javax.security.cert.CertificateException;
import javax.security.cert.CertificateExpiredException;
import javax.security.cert.CertificateNotYetValidException;
import javax.security.cert.X509Certificate;



public class X509CertImpl2 extends X509Certificate {
	private Date notBefore;
	private Date notAfter;
	private PublicKey publicKey;
	private PrivateKey privateKey;
	private BigInteger serial;
	private Algorithm signatureAlgorithm;
	private Principal issuerDN;
	private Principal subjectDN;
	String issuerName;
	String subjectName;
	private static final int version = 3;
	public X509CertImpl2(PublicKey publicKey, PrivateKey privateKey, Principal issuerDN, Principal subjectDN,
			BigInteger serial, Algorithm signatureAlgorithm, Date notBefore, Date notAfter) {
		try {
			this.publicKey = publicKey;
			this.privateKey = privateKey;
			this.issuerDN = issuerDN;
			this.subjectDN = subjectDN;
			this.serial = serial;
			this.signatureAlgorithm = signatureAlgorithm;
			this.notBefore = notBefore;
			this.notAfter = notAfter;
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public void checkValidity() throws CertificateExpiredException, CertificateNotYetValidException {
		Date date = new Date(System.currentTimeMillis());
		checkValidity(date);
	}

	@Override
	public void checkValidity(Date date) throws CertificateExpiredException, CertificateNotYetValidException {
		if (date.before(notBefore)) {
			throw new CertificateNotYetValidException();
		}

		if (date.after(notAfter)) {
			throw new CertificateExpiredException();
		}
	}

	@Override
	public Principal getIssuerDN() {
		return issuerDN;
	}

	@Override
	public Date getNotAfter() {
		return notAfter;
	}

	@Override
	public Date getNotBefore() {
		return notBefore;
	}

	@Override
	public BigInteger getSerialNumber() {
		return serial;
	}

	@Override
	public String getSigAlgName() {
		return signatureAlgorithm.toString();
	}

	@Override
	public String getSigAlgOID() {
		// TODO implement this
		return "";
	}

	@Override
	public byte[] getSigAlgParams() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Principal getSubjectDN() {
		return subjectDN;
	}

	@Override
	public int getVersion() {
		return version;
	}

	@Override
	public byte[] getEncoded() throws CertificateEncodingException {
		ArrayList<Byte> list = new ArrayList<Byte>();
		byte[] result = new PKCS12Attribute("version", "3").getEncoded();
		conc(result, new PKCS12Attribute("serialNumber", serial.toString()).getEncoded());
		conc(result, new PKCS12Attribute("signature", serial.toString()).getEncoded());
		conc(result, new PKCS12Attribute("algorithm", "1.2.840.113549.1.1.5").getEncoded());
		conc(result, new PKCS12Attribute("parameters", "").getEncoded());

		String[] nameValues = parseNameValues(issuerName);
		String[] nameIds = parseNameIdentifiers(issuerName);

		for (int i = 0; i < nameValues.length; i++) {
			conc(result, new PKCS12Attribute(nameIds[i], nameValues[i]).getEncoded());
		}

		byte[] eIssuer = new PKCS12Attribute("signature", serial.toString()).getEncoded();
		return null;
	}

	@Override
	public PublicKey getPublicKey() {
		return publicKey;
	}

	@Override
	public String toString() {
		// TODO Auto-generated method stub
		return null;
	}

	//TODO this shouldn't be done this way. First have it signed, then verify
	@Override
	public void verify(PublicKey key) throws CertificateException, NoSuchAlgorithmException, InvalidKeyException,
			NoSuchProviderException, SignatureException {
		//sign one byte
		Signature sign = Signature.getInstance(key.getAlgorithm());
		sign.initSign(privateKey);
		sign.update((byte) 0x45);
		byte[] signature = sign.sign();
		//see if you can decode it with given key
		Signature sign2 = Signature.getInstance("SHA1withRSA");
		sign2.initVerify(key);
		sign2.update((byte) 0x45);
		sign2.verify(signature);
	}

	@Override
	public void verify(PublicKey key, String sigProvider) throws CertificateException, NoSuchAlgorithmException,
			InvalidKeyException, NoSuchProviderException, SignatureException {
		//TODO check this later
		verify(key);
	}

	// This string must not have extra spaces and equal signs musn't have spaces
	// between idetinfier and values
	private String[] parseNameValues(String name) {
		String[] names = name.split(" ");
		
		for (int i = 0; i < names.length; ++i) {
			String res = names[i].split("=")[0];
			names[i] = res;
		}

		return names;
	}

	private String[] parseNameIdentifiers(String name) {
		String[] names = name.split(" ");

		for (int i = 0; i < names.length; ++i) {
			String res = names[i].split("=")[1];
			names[i] = res;
		}

		return names;
	}

	private byte[] conc(byte[] x, byte[] y) {
		byte[] result = new byte[x.length + y.length];

		int i = 0;

		for (i = 0; i < x.length; i++) {
			result[i] = x[i];
		}
		for (i = 0; i < y.length; i++) {
			result[x.length + i] = y[i];
		}

		return result;
	}
}
